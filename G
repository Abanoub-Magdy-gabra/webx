</div>
                <div class="error-message">Please enter a valid number</div>
            </div>
        </div>

        <button onclick="calculateMetrics()" class="calculate-btn">
            <div class="spinner"></div>
            <span class="btn-text">Calculate Metrics</span>
        </button>

        <div class="results" id="results">
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-title">Current CSAT</div>
                    <div class="metric-value" id="current-csat">0%</div>
                    <div class="metric-change" id="csat-change">
                        <i class="fas fa-arrow-up"></i>
                        <span>0%</span>
                    </div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Current DSAT</div>
                    <div class="metric-value" id="current-dsat">0%</div>
                    <div class="metric-change" id="dsat-change">
                        <i class="fas fa-arrow-down"></i>
                        <span>0%</span>
                    </div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Current Retention</div>
                    <div class="metric-value" id="current-retention">0%</div>
                    <div class="metric-change" id="retention-change">
                        <i class="fas fa-arrow-up"></i>
                        <span>0%</span>
                    </div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Additional Surveys Needed</div>
                    <div class="metric-value" id="surveys-needed">0</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Required Satisfied</div>
                    <div class="metric-value" id="satisfied-needed">0</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Max Allowed Dissatisfied</div>
                    <div class="metric-value" id="max-dissatisfied">0</div>
                </div>
            </div>

            <div class="charts-container">
                <div class="chart-wrapper">
                    <div class="chart-title">Metrics Overview</div>
                    <canvas id="metrics-chart"></canvas>
                </div>
                <div class="chart-wrapper">
                    <div class="chart-title">Customer Response Distribution</div>
                    <canvas id="distribution-chart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let metricsChart;
        let distributionChart;
        let previousMetrics = null;

        // Initialize tooltips
        Chart.defaults.color = '#fff';
        Chart.defaults.borderColor = 'rgba(255, 255, 255, 0.1)';

        function validateInput(input, min, max) {
            const value = parseFloat(input.value);
            const errorMessage = input.parentElement.parentElement.querySelector('.error-message');
            const isValid = !isNaN(value) && value >= min && (max ? value <= max : true);
            
            input.classList.toggle('input-error', !isValid);
            errorMessage.style.display = isValid ? 'none' : 'block';
            
            return isValid;
        }

        function validateAllInputs() {
            const inputs = {
                targetCSAT: document.getElementById('target-csat'),
                maxDSAT: document.getElementById('max-dsat'),
                targetRetention: document.getElementById('target-retention'),
                currentSurveys: document.getElementById('current-surveys'),
                satisfiedCustomers: document.getElementById('satisfied-customers'),
                dissatisfiedCustomers: document.getElementById('dissatisfied-customers')
            };

            let isValid = true;

            // Validate percentage inputs
            isValid &= validateInput(inputs.targetCSAT, 0, 100);
            isValid &= validateInput(inputs.maxDSAT, 0, 100);
            isValid &= validateInput(inputs.targetRetention, 0, 100);

            // Validate numeric inputs
            isValid &= validateInput(inputs.currentSurveys, 0);
            isValid &= validateInput(inputs.satisfiedCustomers, 0);
            isValid &= validateInput(inputs.dissatisfiedCustomers, 0);

            // Additional validation for totals
            const total = parseInt(inputs.satisfiedCustomers.value) + parseInt(inputs.dissatisfiedCustomers.value);
            const currentSurveys = parseInt(inputs.currentSurveys.value);
            
            if (total > currentSurveys) {
                alert("Total of satisfied and dissatisfied customers cannot exceed total surveys");
                isValid = false;
            }

            return isValid ? {
                targetCSAT: parseFloat(inputs.targetCSAT.value),
                maxDSAT: parseFloat(inputs.maxDSAT.value),
                targetRetention: parseFloat(inputs.targetRetention.value),
                currentSurveys: parseInt(inputs.currentSurveys.value),
                satisfiedCustomers: parseInt(inputs.satisfiedCustomers.value),
                dissatisfiedCustomers: parseInt(inputs.dissatisfiedCustomers.value)
            } : null;
        }

        function calculateMetrics() {
            const button = document.querySelector('.calculate-btn');
            button.classList.add('loading');

            setTimeout(() => {
                const inputs = validateAllInputs();
                if (!inputs) {
                    button.classList.remove('loading');
                    return;
                }

                const {
                    targetCSAT,
                    maxDSAT,
                    targetRetention,
                    currentSurveys,
                    satisfiedCustomers,
                    dissatisfiedCustomers
                } = inputs;

                const currentCSAT = ((satisfiedCustomers / currentSurveys) * 100).toFixed(1);
                const currentDSAT = ((dissatisfiedCustomers / currentSurveys) * 100).toFixed(1);
                const neutralCustomers = currentSurveys - satisfiedCustomers - dissatisfiedCustomers;
                const currentRetention = (((currentSurveys - dissatisfiedCustomers) / currentSurveys) * 100).toFixed(1);

                let additionalSurveysNeeded = 0;
                let satisfiedResponsesNeeded = 0;
                let maxAllowedDissatisfied = Math.floor((maxDSAT / 100) * currentSurveys);

                if (currentCSAT < targetCSAT || currentDSAT > maxDSAT || currentRetention < targetRetention) {
                    const targetSatisfied = Math.ceil((targetCSAT / 100) * currentSurveys);
                    const minRetention = Math.ceil((targetRetention / 100) * currentSurveys);
                    
                    satisfiedResponsesNeeded = Math.max(
                        targetSatisfied - satisfiedCustomers,
                        minRetention - (currentSurveys - dissatisfiedCustomers)
                    );
                    
                    additionalSurveysNeeded = Math.ceil(satisfiedResponsesNeeded / (targetCSAT / 100));
                }

                // Calculate changes from previous metrics
                const metrics = {
                    csat: parseFloat(currentCSAT),
                    dsat: parseFloat(currentDSAT),
                    retention: parseFloat(currentRetention)
                };

                if (previousMetrics) {
                    updateMetricChange('csat', metrics.csat - previousMetrics.csat);
                    updateMetricChange('dsat', metrics.dsat - previousMetrics.dsat);
                    updateMetricChange('retention', metrics.retention - previousMetrics.retention);
                }

                previousMetrics = metrics;

                // Update metrics with animation
                animateValue('current-csat', currentCSAT + '%');
                animateValue('current-dsat', currentDSAT + '%');
                animateValue('current-retention', currentRetention + '%');
                animateValue('surveys-needed', additionalSurveysNeeded);
                animateValue('satisfied-needed', satisfiedResponsesNeeded);
                animateValue('max-dissatisfied', maxAllowedDissatisfied);

                // Show results with animation
                const results = document.getElementById('results');
                results.style.display = 'block';
                results.classList.add('fade-in');

                updateCharts({
                    currentCSAT,
                    targetCSAT,
                    currentDSAT,
                    maxDSAT,
                    currentRetention,
                    targetRetention,
                    satisfiedCustomers,
                    dissatisfiedCustomers,
                    neutralCustomers
                });

                button.classList.remove('loading');
            }, 800);
        }

        function updateMetricChange(metric, change) {
            const element = document.getElementById(`${metric}-change`);
            const icon = element.querySelector('i');
            const value = element.querySelector('span');
            
            icon.className = change >= 0 ? 'fas fa-arrow-up' : 'fas fa-arrow-down';
            element.className = `metric-change ${change >= 0 ? '' : 'negative'}`;
            value.textContent = `${Math.abs(change).toFixed(1)}%`;
        }

        function animateValue(elementId, endValue) {
            const element = document.getElementById(elementId);
            const start = parseInt(element.innerHTML) || 0;
            const end = parseInt(endValue) || 0;
            const duration = 1000;
            const startTime = performance.now();

            function update(currentTime) {
                const elapsed = currentTime - startTime;
                const progress = Math.min(elapsed / duration, 1);

                const value = Math.floor(start + (end - start) * progress);
                element.innerHTML = elementId.includes('csat') || elementId.includes('dsat') || elementId.includes('retention') 
                    ? value + '%' 
                    : value;

                if (progress < 1) {
                    requestAnimationFrame(update);
                }
            }

            requestAnimationFrame(update);
        }

        function updateCharts(data) {
            // Update Metrics Overview Chart
            const metricsCtx = document.getElementById('metrics-chart').getContext('2d');
            if (metricsChart) metricsChart.destroy();

            metricsChart = new Chart(metricsCtx, {
                type: 'bar',
                data: {
                    labels: ['CSAT', 'DSAT', 'Retention'],
                    datasets: [
                        {
                            label: 'Current',
                            data: [data.currentCSAT, data.currentDSAT, data.currentRetention],
                            backgroundColor: '#0ea5e9',
                            borderRadius: 8
                        },
                        {
                            label: 'Target',
                            data: [data.targetCSAT, data.maxDSAT, data.targetRetention],
                            backgroundColor: '#6366f1',
                            borderRadius: 8
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Update Distribution Chart
            const distributionCtx = document.getElementById('distribution-chart').getContext('2d');
            if (distributionChart) distributionChart.destroy();

            distributionChart = new Chart(distributionCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Satisfied', 'Neutral', 'Dissatisfied'],
                    datasets: [{
                        data: [
                            data.satisfiedCustomers,
                            data.neutralCustomers,
                            data.dissatisfiedCustomers
                        ],
                        backgroundColor: [
                            '#22c55e',
                            '#6366f1',
                            '#ef4444'
                        ],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // Add input validation on blur
        document.querySelectorAll('input').forEach(input => {
            input.addEventListener('blur', () => {
                if (input.id.includes('target') || input.id.includes('max')) {
                    validateInput(input, 0, 100);
                } else {
                    validateInput(input, 0);
                }
            });
        });
    </script>
</body>
</html>
